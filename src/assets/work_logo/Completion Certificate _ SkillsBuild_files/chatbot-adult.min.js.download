/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sendOTP: () => (/* binding */ sendOTP),
/* harmony export */   verifyOTP: () => (/* binding */ verifyOTP)
/* harmony export */ });
/* harmony import */ var _call_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);


async function sendOTP(event, webChatInstance, userProfile, tenant) {
  // To send OTP code
  const data = {
    email: event.data.context.skills['actions skill'].skill_variables.Email_Address_Change.value,
    name: userProfile.FirstName,
    tenant: tenant,
  };
  const url = "https://chatbot.5bcb70fa.public.multi-containers.ibm.com" + '/sendotp';
  let Email_Address_Change_Send_OTP_Status = false;
  let Email_Address_Change_Send_OTP_Status_Text = '';

  await (0,_call_api_js__WEBPACK_IMPORTED_MODULE_0__.postData)(url, data).then((result) => {
    if (result.exception) {
      Email_Address_Change_Send_OTP_Status_Text = 'Email address change send OTP unsuccessful due to server error';
      Email_Address_Change_Send_OTP_Status = false;
    } else {
      // console.log(result); // JSON data parsed by `data.json()` call
      if (result.success === true) {
        Email_Address_Change_Send_OTP_Status_Text = 'Email address change send OTP successful';
        Email_Address_Change_Send_OTP_Status = true;
      } else {
        Email_Address_Change_Send_OTP_Status_Text = result.message;
        Email_Address_Change_Send_OTP_Status = false;
      }
    }
  });

  const sendObject = {
    input: {
      message_type: 'text',
      text: Email_Address_Change_Send_OTP_Status_Text
    },
    context: {
      skills: {
        ['actions skill']: {
          skill_variables: {
            Email_Address_Change_Send_OTP_Status: Email_Address_Change_Send_OTP_Status,
            Email_Address_Change_Send_OTP_Status_Text: Email_Address_Change_Send_OTP_Status_Text,
            Email_Address_Change_Send_OTP: false, // Reset the variable so that the send OTP is not called again
          }
        }
      }
    }
  };
  const sendOptions = {
    silent: true
  };
  webChatInstance.send(sendObject, sendOptions);
}

async function verifyOTP(event, webChatInstance, userProfile, tenant) {
  // To verify OTP code
  let digitRegExp = /^\d+$/;
  const OTP = event.data.context.skills['actions skill'].skill_variables.Email_Address_Change_OTP;
  let Email_Address_Change_Verify_OTP_Status = false;
  let Email_Address_Change_Verify_OTP_Status_Text = '';
  if (digitRegExp.test(OTP) && OTP.length == 6) {
    const data = {
      cnum: userProfile.Cnum,
      email: event.data.context.skills['actions skill'].skill_variables.Email_Address_Change.value,
      type: event.data.context.skills['actions skill'].skill_variables.Email_Address_Change_Type,
      otp: event.data.context.skills['actions skill'].skill_variables.Email_Address_Change_OTP,
      tenant: tenant,
      token: window.YL.JWT_VALUE,
    };
    const url = "https://chatbot.5bcb70fa.public.multi-containers.ibm.com" + '/verifyotp';
    await (0,_call_api_js__WEBPACK_IMPORTED_MODULE_0__.postData)(url, data).then((result) => {
      if (result.exception) {
        Email_Address_Change_Verify_OTP_Status_Text = 'Verify OTP unsuccessful due to server error';
        Email_Address_Change_Verify_OTP_Status = false;
      } else {
        console.log(result); // JSON data parsed by `data.json()` call
        if (result.success === true) {
          Email_Address_Change_Verify_OTP_Status_Text = 'Verify OTP successful';
          Email_Address_Change_Verify_OTP_Status = true;
        } else {
          Email_Address_Change_Verify_OTP_Status_Text = result.message;
          Email_Address_Change_Verify_OTP_Status = false;
        }
      }
    });
  } else {
    Email_Address_Change_Verify_OTP_Status_Text = 'The OTP is invalid';
    Email_Address_Change_Verify_OTP_Status = false;
  }

  const sendObject = {
    input: {
      message_type: 'text',
      text: Email_Address_Change_Verify_OTP_Status_Text
    },
    context: {
      skills: {
        ['actions skill']: {
          skill_variables: {
            Email_Address_Change_Verify_OTP_Status: Email_Address_Change_Verify_OTP_Status,
            Email_Address_Change_Verify_OTP_Status_Text: Email_Address_Change_Verify_OTP_Status_Text,
            Email_Address_Change_Verify_OTP: false, // Reset the variable so that the verify OTP is not called again
          }
        }
      }
    }
  };
  const sendOptions = {
    silent: true
  };
  webChatInstance.send(sendObject, sendOptions);
}



/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getData: () => (/* binding */ getData),
/* harmony export */   postData: () => (/* binding */ postData)
/* harmony export */ });
async function postData(url, data) {
  try {
    const result = await fetch(url,
      {
        method: "POST",
        mode: "cors",
        cache: "no-cache",
        credentials: "same-origin",
        headers: {
          "Content-Type": "application/json",
        },
        redirect: "follow", // manual, *follow, error
        referrerPolicy: "no-referrer",
        body: JSON.stringify(data),
      }
    );
    if (!result.ok) {
      console.log('api call failed: ' + url);
      return Promise.resolve({});
    } else {
      return result.json();
    }
  } catch (error) {
    console.error("Error:", error);
    return Promise.resolve({});
  }
}

async function getData(url, headers = {}) {
  try {
    let result;
    if (headers) {
      result = await fetch(url,
        {
          method: 'GET',
          mode: 'cors',
          cache: 'no-cache',
          headers: headers,
        }
      );
    } else {
      result = await fetch(url,
        {
          method: 'GET',
          mode: 'cors',
          cache: 'no-cache',
        }
      );
    }
    
    if (!result.ok) {
      console.log('api call failed: ' + url);
      return Promise.resolve({});
    } else {
      return result.json();
    }
  } catch (error) {
    console.error("Error:", error);
    return Promise.resolve({});
  }
}



/***/ }),
/* 3 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCspTicket: () => (/* binding */ createCspTicket)
/* harmony export */ });
/* harmony import */ var _call_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _library_third_party_ua_parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _library_third_party_ua_parser_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_library_third_party_ua_parser_js__WEBPACK_IMPORTED_MODULE_1__);



async function createCspTicket(event, webChatInstance, userProfile, tenant) {
  const skillVariables = event.data.context.skills['actions skill'].skill_variables;
  // console.log(skillVariables);
  
  const userAgentInfo = new _library_third_party_ua_parser_js__WEBPACK_IMPORTED_MODULE_1__.UAParser().getResult();
  let browser='';
  if (userAgentInfo['browser']['name'] !== undefined) {
    browser = userAgentInfo['browser']['name'];
    if (userAgentInfo['browser']['version'] !== undefined) {
      browser = browser + ' ' + userAgentInfo['browser']['version'];
    }
  }
  let device='';
  if (userAgentInfo['device']['vendor'] !== undefined) {
    device = userAgentInfo['device']['vendor'];
    if (userAgentInfo['device']['model'] !== undefined) {
      device = device + ' ' + userAgentInfo['device']['model'];
    }
  }
  let os='';
  if (userAgentInfo['os']['name'] !== undefined) {
    os = userAgentInfo['os']['name'];
    if (userAgentInfo['os']['version'] !== undefined) {
      os = os + ' ' + userAgentInfo['os']['version'];
    }
  }

  let data = {
    firstName: userProfile.FirstName,
    lastName: userProfile.LastName,
    email: userProfile.Email,
    userType: skillVariables.User_Type,
    organization: skillVariables.Organization_Name,
    country: skillVariables.User_Country,
    location: skillVariables.User_Location,
    language: skillVariables.Preferred_Language,
    issueCategory: skillVariables.Support_Ticket_Type,
    issueDescription: skillVariables.Support_Ticket_Description,
    regionConsent: skillVariables.User_RegionConsent,
    groupId: skillVariables.Group_Id,
    organizationPartner: skillVariables.Organization_Partner,
    browser: browser,
    device: device,
    os: os,
  };

  data['tenant'] = tenant;

  if (skillVariables?.Support_Ticket_Screenshot_File_Original_Name) {
    const uploadedFiles = skillVariables.Support_Ticket_Screenshot_File_Original_Name.split(':');
    data['files'] = [];
    uploadedFiles.forEach((value, index) => {
      data['files'][index] = value;
    });
  }
  if (skillVariables?.Support_Ticket_Activity_Page_Url) {
    // data['pageUrl'] = skillVariables.Support_Ticket_Activity_Page_Url.value;
    // The replace code is for IBM watsonx Assistant Plus bug
    data['pageUrl'] = skillVariables.Support_Ticket_Activity_Page_Url.replaceAll('&amp;', '&');
  }
  if (skillVariables.Support_Ticket_Type === 'Learning activity / course content') {
    data['activityCourseName'] = skillVariables.Support_Ticket_Activity_Course_Name.value;
  }
  if (skillVariables.Support_Ticket_Type === 'Registration') {
    data['registrationMethod'] = skillVariables.User_Source;
    data['registrationSource'] = skillVariables.User_oAuthProvider;
  }
  if (skillVariables.Support_Ticket_Type === 'Digital credential / certification question') {
    data['badge'] = skillVariables.Support_Ticket_Digital_Credential_Name;
  }

  const url = "https://chatbot.5bcb70fa.public.multi-containers.ibm.com" + '/submitCspTicket';
  let Support_Ticket_Submit_Status = false;
  let Support_Ticket_Submit_Status_Text = '';

  await (0,_call_api_js__WEBPACK_IMPORTED_MODULE_0__.postData)(url, data).then((result) => {
    if (result.exception) {
      Support_Ticket_Submit_Status_Text = 'Support Ticket Submit is unsuccessful due to server error';
      Support_Ticket_Submit_Status = false;
    } else {
      // console.log(result); // JSON data parsed by `data.json()` call
      if (result.success === true) {
        Support_Ticket_Submit_Status_Text = 'Support Ticket Submit is successful';
        Support_Ticket_Submit_Status = true;
      } else {
        Support_Ticket_Submit_Status_Text = result.message;
        Support_Ticket_Submit_Status = false;
      }
    }
  });

  const sendObject = {
    input: {
      message_type: 'text',
      text: Support_Ticket_Submit_Status_Text
    },
    context: {
      skills: {
        ['actions skill']: {
          skill_variables: {
            Support_Ticket_Submit_Status: Support_Ticket_Submit_Status,
            Support_Ticket_Submit_Status_Text: Support_Ticket_Submit_Status_Text,
            Support_Ticket_Submit: false, // Reset the variable so that submit CSP ticket is not called again
          }
        }
      }
    }
  };
  const sendOptions = {
    silent: true
  };
  webChatInstance.send(sendObject, sendOptions);
}



/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/////////////////////////////////////////////////////////////////////////////////
/* my-ua-parser
   Copyright © 2024 Matteo Collina <hello@matteocollina.com>
   Copyright © 2012-2023 Faisal Salman <f@faisalman.com>
   MIT License */ /*
   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.
   Supports browser & node.js environment. 
   Source : https://github.com/mcollina/my-ua-parser */
/////////////////////////////////////////////////////////////////////////////////

(function(window, undefined) {
  'use strict';

  //////////////
  // Constants
  /////////////

  let EMPTY = '',
    UNKNOWN = '?',
    FUNC_TYPE = 'function',
    UNDEF_TYPE = 'undefined',
    OBJ_TYPE = 'object',
    STR_TYPE = 'string',
    MAJOR = 'major',
    MODEL = 'model',
    NAME = 'name',
    TYPE = 'type',
    VENDOR = 'vendor',
    VERSION = 'version',
    ARCHITECTURE = 'architecture',
    CONSOLE = 'console',
    MOBILE = 'mobile',
    TABLET = 'tablet',
    SMARTTV = 'smarttv',
    WEARABLE = 'wearable',
    EMBEDDED = 'embedded',
    UA_MAX_LENGTH = 500;

  let AMAZON = 'Amazon',
    APPLE = 'Apple',
    ASUS = 'ASUS',
    BLACKBERRY = 'BlackBerry',
    BROWSER = 'Browser',
    CHROME = 'Chrome',
    EDGE = 'Edge',
    FIREFOX = 'Firefox',
    GOOGLE = 'Google',
    HUAWEI = 'Huawei',
    LG = 'LG',
    MICROSOFT = 'Microsoft',
    MOTOROLA = 'Motorola',
    OPERA = 'Opera',
    SAMSUNG = 'Samsung',
    SHARP = 'Sharp',
    SONY = 'Sony',
    XIAOMI = 'Xiaomi',
    ZEBRA = 'Zebra',
    FACEBOOK = 'Facebook',
    CHROMIUM_OS = 'Chromium OS',
    MAC_OS = 'Mac OS';

  ///////////
  // Helper
  //////////

  const extend = function(regexes, extensions) {
      let mergedRegexes = {};
      for (let i in regexes) {
        if (extensions[i] && extensions[i].length % 2 === 0) {
          mergedRegexes[i] = extensions[i].concat(regexes[i]);
        } else {
          mergedRegexes[i] = regexes[i];
        }
      }
      return mergedRegexes;
    },
    enumerize = function(arr) {
      let enums = {};
      for (let i = 0; i < arr.length; i++) {
        enums[arr[i].toUpperCase()] = arr[i];
      }
      return enums;
    },
    has = function(str1, str2) {
      return typeof str1 === STR_TYPE
        ? lowerize(str2).indexOf(lowerize(str1)) !== -1
        : false;
    },
    lowerize = function(str) {
      return str.toLowerCase();
    },
    majorize = function(version) {
      return typeof version === STR_TYPE
        ? version.replace(/[^\d\.]/g, EMPTY).split('.')[0]
        : undefined;
    },
    trim = function(str, len) {
      if (typeof str === STR_TYPE) {
        str = str.replace(/^\s\s*/, EMPTY);
        return typeof len === UNDEF_TYPE
          ? str
          : str.substring(0, UA_MAX_LENGTH);
      }
    };

  ///////////////
  // Map helper
  //////////////

  const rgxMapper = function(ua, arrays) {
      let i = 0,
        j,
        k,
        p,
        q,
        matches,
        match;

      // loop through all regexes maps
      while (i < arrays.length && !matches) {
        let regex = arrays[i], // even sequence (0,2,4,..)
          props = arrays[i + 1]; // odd sequence (1,3,5,..)
        j = k = 0;

        // try matching uastring with regexes
        while (j < regex.length && !matches) {
          if (!regex[j]) {
            break;
          }
          matches = regex[j++].exec(ua);

          if (!!matches) {
            for (p = 0; p < props.length; p++) {
              match = matches[++k];
              q = props[p];
              // check if given property is actually array
              if (typeof q === OBJ_TYPE && q.length > 0) {
                if (q.length === 2) {
                  if (typeof q[1] == FUNC_TYPE) {
                    // assign modified match
                    this[q[0]] = q[1].call(this, match);
                  } else {
                    // assign given value, ignore regex match
                    this[q[0]] = q[1];
                  }
                } else if (q.length === 3) {
                  // check whether function or regex
                  if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                    // call function (usually string mapper)
                    this[q[0]] = match
                      ? q[1].call(this, match, q[2])
                      : undefined;
                  } else {
                    // sanitize match using given regex
                    this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                  }
                } else if (q.length === 4) {
                  this[q[0]] = match
                    ? q[3].call(this, match.replace(q[1], q[2]))
                    : undefined;
                }
              } else {
                this[q] = match ? match : undefined;
              }
            }
          }
        }
        i += 2;
      }
    },
    strMapper = function(str, map) {
      for (let i in map) {
        // check if current value is array
        if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
          for (let j = 0; j < map[i].length; j++) {
            if (has(map[i][j], str)) {
              return i === UNKNOWN ? undefined : i;
            }
          }
        } else if (has(map[i], str)) {
          return i === UNKNOWN ? undefined : i;
        }
      }
      return str;
    };

  ///////////////
  // String map
  //////////////

  // Safari < 3.0
  let oldSafariMap = {
      '1.0': '/8',
      '1.2': '/1',
      '1.3': '/3',
      '2.0': '/412',
      '2.0.2': '/416',
      '2.0.3': '/417',
      '2.0.4': '/419',
      '?': '/',
    },
    windowsVersionMap = {
      ME: '4.90',
      'NT 3.11': 'NT3.51',
      'NT 4.0': 'NT4.0',
      '2000': 'NT 5.0',
      XP: ['NT 5.1', 'NT 5.2'],
      Vista: 'NT 6.0',
      '7': 'NT 6.1',
      '8': 'NT 6.2',
      '8.1': 'NT 6.3',
      '10': ['NT 6.4', 'NT 10.0'],
      RT: 'ARM',
    };

  //////////////
  // Regex map
  /////////////

  let regexes = {
    browser: [
      [
        /\b(?:crmo|crios)\/([\w\.]+)/i, // Chrome for Android/iOS
      ],
      [VERSION, [NAME, 'Chrome']],
      [
        /edg(?:e|ios|a)?\/([\w\.]+)/i, // Microsoft Edge
      ],
      [VERSION, [NAME, 'Edge']],
      [
        // Presto based
        /(opera mini)\/([-\w\.]+)/i, // Opera Mini
        /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i, // Opera Mobi/Tablet
        /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i, // Opera
      ],
      [NAME, VERSION],
      [
        /opios[\/ ]+([\w\.]+)/i, // Opera mini on iphone >= 8.0
      ],
      [VERSION, [NAME, OPERA + ' Mini']],
      [
        /\bop(?:rg)?x\/([\w\.]+)/i, // Opera GX
      ],
      [VERSION, [NAME, OPERA + ' GX']],
      [
        /\bopr\/([\w\.]+)/i, // Opera Webkit
      ],
      [VERSION, [NAME, OPERA]],
      [
        // Mixed
        /\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i, // Baidu
      ],
      [VERSION, [NAME, 'Baidu']],
      [
        /(kindle)\/([\w\.]+)/i, // Kindle
        /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i, // Lunascape/Maxthon/Netfront/Jasmine/Blazer
        // Trident based
        /(avant|iemobile|slim)\s?(?:browser)?[\/ ]?([\w\.]*)/i, // Avant/IEMobile/SlimBrowser
        /(?:ms|\()(ie) ([\w\.]+)/i, // Internet Explorer

        // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
        /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
        // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
        /(heytap|ovi)browser\/([\d\.]+)/i, // Heytap/Ovi
        /(weibo)__([\d\.]+)/i, // Weibo
      ],
      [NAME, VERSION],
      [
        /\bddg\/([\w\.]+)/i, // DuckDuckGo
      ],
      [VERSION, [NAME, 'DuckDuckGo']],
      [
        /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i, // UCBrowser
      ],
      [VERSION, [NAME, 'UC' + BROWSER]],
      [
        /microm.+\bqbcore\/([\w\.]+)/i, // WeChat Desktop for Windows Built-in Browser
        /\bqbcore\/([\w\.]+).+microm/i,
        /micromessenger\/([\w\.]+)/i, // WeChat
      ],
      [VERSION, [NAME, 'WeChat']],
      [
        /konqueror\/([\w\.]+)/i, // Konqueror
      ],
      [VERSION, [NAME, 'Konqueror']],
      [
        /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i, // IE11
      ],
      [VERSION, [NAME, 'IE']],
      [
        /ya(?:search)?browser\/([\w\.]+)/i, // Yandex
      ],
      [VERSION, [NAME, 'Yandex']],
      [
        /slbrowser\/([\w\.]+)/i, // Smart Lenovo Browser
      ],
      [VERSION, [NAME, 'Smart Lenovo ' + BROWSER]],
      [
        /(avast|avg)\/([\w\.]+)/i, // Avast/AVG Secure Browser
      ],
      [[NAME, /(.+)/, '$1 Secure ' + BROWSER], VERSION],
      [
        /\bfocus\/([\w\.]+)/i, // Firefox Focus
      ],
      [VERSION, [NAME, FIREFOX + ' Focus']],
      [
        /\bopt\/([\w\.]+)/i, // Opera Touch
      ],
      [VERSION, [NAME, OPERA + ' Touch']],
      [
        /coc_coc\w+\/([\w\.]+)/i, // Coc Coc Browser
      ],
      [VERSION, [NAME, 'Coc Coc']],
      [
        /dolfin\/([\w\.]+)/i, // Dolphin
      ],
      [VERSION, [NAME, 'Dolphin']],
      [
        /coast\/([\w\.]+)/i, // Opera Coast
      ],
      [VERSION, [NAME, OPERA + ' Coast']],
      [
        /miuibrowser\/([\w\.]+)/i, // MIUI Browser
      ],
      [VERSION, [NAME, 'MIUI ' + BROWSER]],
      [
        /fxios\/([-\w\.]+)/i, // Firefox for iOS
      ],
      [VERSION, [NAME, FIREFOX]],
      [
        /\bqihu|(qi?ho?o?|360)browser/i, // 360
      ],
      [[NAME, '360 ' + BROWSER]],
      [/(oculus|sailfish|huawei|vivo)browser\/([\w\.]+)/i],
      [[NAME, /(.+)/, '$1 ' + BROWSER], VERSION],
      [
        // Oculus/Sailfish/HuaweiBrowser/VivoBrowser
        /samsungbrowser\/([\w\.]+)/i, // Samsung Internet
      ],
      [VERSION, [NAME, SAMSUNG + ' Internet']],
      [
        /(comodo_dragon)\/([\w\.]+)/i, // Comodo Dragon
      ],
      [[NAME, /_/g, ' '], VERSION],
      [
        /metasr[\/ ]?([\d\.]+)/i, // Sogou Explorer
      ],
      [VERSION, [NAME, 'Sogou Explorer']],
      [
        /(sogou)mo\w+\/([\d\.]+)/i, // Sogou Mobile
      ],
      [[NAME, 'Sogou Mobile'], VERSION],
      [
        /(electron)\/([\w\.]+) safari/i, // Electron-based App
        /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i, // Tesla
        /m?(qqbrowser|2345Explorer)[\/ ]?([\w\.]+)/i, // QQBrowser/2345 Browser
      ],
      [NAME, VERSION],
      [
        /(lbbrowser)/i, // LieBao Browser
        /\[(linkedin)app\]/i, // LinkedIn App for iOS & Android
      ],
      [NAME],
      [
        // WebView
        /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i, // Facebook App for iOS & Android
      ],
      [[NAME, FACEBOOK], VERSION],
      [
        /(Klarna)\/([\w\.]+)/i, // Klarna Shopping Browser for iOS & Android
        /(kakao(?:talk|story))[\/ ]([\w\.]+)/i, // Kakao App
        /(naver)\(.*?(\d+\.[\w\.]+).*\)/i, // Naver InApp
        /safari (line)\/([\w\.]+)/i, // Line App for iOS
        /\b(line)\/([\w\.]+)\/iab/i, // Line App for Android
        /(alipay)client\/([\w\.]+)/i, // Alipay
        /(twitter)(?:and| f.+e\/([\w\.]+))/i, // Twitter
        /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i, // Chromium/Instagram/Snapchat
      ],
      [NAME, VERSION],
      [
        /\bgsa\/([\w\.]+) .*safari\//i, // Google Search Appliance on iOS
      ],
      [VERSION, [NAME, 'GSA']],
      [
        /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i, // TikTok
      ],
      [VERSION, [NAME, 'TikTok']],
      [
        /headlesschrome(?:\/([\w\.]+)| )/i, // Chrome Headless
      ],
      [VERSION, [NAME, CHROME + ' Headless']],
      [
        / wv\).+(chrome)\/([\w\.]+)/i, // Chrome WebView
      ],
      [[NAME, CHROME + ' WebView'], VERSION],
      [
        /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i, // Android Browser
      ],
      [VERSION, [NAME, 'Android ' + BROWSER]],
      [
        /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i, // Chrome/OmniWeb/Arora/Tizen/Nokia
      ],
      [NAME, VERSION],
      [
        /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i, // Mobile Safari
      ],
      [VERSION, [NAME, 'Mobile Safari']],
      [
        /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i, // Safari & Safari Mobile
      ],
      [VERSION, NAME],
      [
        /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i, // Safari < 3.0
      ],
      [NAME, [VERSION, strMapper, oldSafariMap]],
      [/(webkit|khtml)\/([\w\.]+)/i],
      [NAME, VERSION],
      [
        // Gecko based
        /(navigator|netscape\d?)\/([-\w\.]+)/i, // Netscape
      ],
      [[NAME, 'Netscape'], VERSION],
      [
        /mobile vr; rv:([\w\.]+)\).+firefox/i, // Firefox Reality
      ],
      [VERSION, [NAME, FIREFOX + ' Reality']],
      [
        /ekiohf.+(flow)\/([\w\.]+)/i, // Flow
        /(swiftfox)/i, // Swiftfox
        /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
        // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
        /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
        // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
        /(firefox)\/([\w\.]+)/i, // Other Firefox-based
        /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i, // Mozilla

        // Other
        /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
        // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
        /(links) \(([\w\.]+)/i, // Links
        /panasonic;(viera)/i, // Panasonic Viera
      ],
      [NAME, VERSION],
      [
        /(cobalt)\/([\w\.]+)/i, // Cobalt
      ],
      [NAME, [VERSION, /master.|lts./, '']],
    ],

    cpu: [
      [
        /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i, // AMD64 (x64)
      ],
      [[ARCHITECTURE, 'amd64']],
      [
        /(ia32(?=;))/i, // IA32 (quicktime)
      ],
      [[ARCHITECTURE, lowerize]],
      [
        /((?:i[346]|x)86)[;\)]/i, // IA32 (x86)
      ],
      [[ARCHITECTURE, 'ia32']],
      [
        /\b(aarch64|arm(v?8e?l?|_?64))\b/i, // ARM64
      ],
      [[ARCHITECTURE, 'arm64']],
      [
        /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i, // ARMHF
      ],
      [[ARCHITECTURE, 'armhf']],
      [
        // PocketPC mistakenly identified as PowerPC
        /windows (ce|mobile); ppc;/i,
      ],
      [[ARCHITECTURE, 'arm']],
      [
        /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i, // PowerPC
      ],
      [[ARCHITECTURE, /ower/, EMPTY, lowerize]],
      [
        /(sun4\w)[;\)]/i, // SPARC
      ],
      [[ARCHITECTURE, 'sparc']],
      [
        /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i,
        // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
      ],
      [[ARCHITECTURE, lowerize]],
    ],

    device: [
      [
        //////////////////////////
        // MOBILES & TABLETS
        /////////////////////////

        // Samsung
        /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i,
      ],
      [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]],
      [
        /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
        /samsung[- ]([-\w]+)/i,
        /sec-(sgh\w+)/i,
      ],
      [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]],
      [
        // Apple
        /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i, // iPod/iPhone
      ],
      [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],
      [
        /\((ipad);[-\w\),; ]+apple/i, // iPad
        /applecoremedia\/[\w\.]+ \((ipad)/i,
        /\b(ipad)\d\d?,\d\d?[;\]].+ios/i,
      ],
      [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],
      [/(macintosh);/i],
      [MODEL, [VENDOR, APPLE]],
      [
        // Sharp
        /\b(sh-?[altvz]?\d\d[a-ekm]?)/i,
      ],
      [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]],
      [
        // Huawei
        /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i,
      ],
      [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]],
      [
        /(?:huawei|honor)([-\w ]+)[;\)]/i,
        /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i,
      ],
      [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]],
      [
        // Xiaomi
        /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i, // Xiaomi POCO
        /\b; (\w+) build\/hm\1/i, // Xiaomi Hongmi 'numeric' models
        /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i, // Xiaomi Hongmi
        /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i, // Xiaomi Redmi
        /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i, // Xiaomi Redmi 'numeric' models
        /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i, // Xiaomi Mi
      ],
      [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]],
      [
        /oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i, // Redmi Pad
        /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i, // Mi Pad tablets
      ],
      [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]],
      [
        // OPPO
        /; (\w+) bui.+ oppo/i,
        /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i,
      ],
      [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]],
      [/\b(opd2\d{3}a?) bui/i],
      [MODEL, [VENDOR, 'OPPO'], [TYPE, TABLET]],
      [
        // Vivo
        /vivo (\w+)(?: bui|\))/i,
        /\b(v[12]\d{3}\w?[at])(?: bui|;)/i,
      ],
      [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]],
      [
        // Realme
        /\b(rmx[1-3]\d{3})(?: bui|;|\))/i,
      ],
      [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]],
      [
        // Motorola
        /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
        /\bmot(?:orola)?[- ](\w*)/i,
        /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i,
      ],
      [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]],
      [/\b(mz60\d|xoom[2 ]{0,2}) build\//i],
      [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]],
      [
        // LG
        /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i,
      ],
      [MODEL, [VENDOR, LG], [TYPE, TABLET]],
      [
        /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
        /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
        /\blg-?([\d\w]+) bui/i,
      ],
      [MODEL, [VENDOR, LG], [TYPE, MOBILE]],
      [
        // Lenovo
        /(ideatab[-\w ]+)/i,
        /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i,
      ],
      [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]],
      [
        // Nokia
        /(?:maemo|nokia).*(n900|lumia \d+)/i,
        /nokia[-_ ]?([-\w\.]*)/i,
      ],
      [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]],
      [
        // Google
        /(pixel c)\b/i, // Google Pixel C
      ],
      [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]],
      [
        /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i, // Google Pixel
      ],
      [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]],
      [
        // Sony
        /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i,
      ],
      [MODEL, [VENDOR, SONY], [TYPE, MOBILE]],
      [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i],
      [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]],
      [
        // OnePlus
        / (kb2005|in20[12]5|be20[12][59])\b/i,
        /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i,
      ],
      [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]],
      [
        // Amazon
        /(alexa)webm/i,
        /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i, // Kindle Fire without Silk / Echo Show
        /(kf[a-z]+)( bui|\)).+silk\//i, // Kindle Fire HD
      ],
      [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]],
      [
        /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i, // Fire Phone
      ],
      [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]],
      [
        // BlackBerry
        /(playbook);[-\w\),; ]+(rim)/i, // BlackBerry PlayBook
      ],
      [MODEL, VENDOR, [TYPE, TABLET]],
      [
        /\b((?:bb[a-f]|st[hv])100-\d)/i,
        /\(bb10; (\w+)/i, // BlackBerry 10
      ],
      [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]],
      [
        // Asus
        /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i,
      ],
      [MODEL, [VENDOR, ASUS], [TYPE, TABLET]],
      [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],
      [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]],
      [
        // HTC
        /(nexus 9)/i, // HTC Nexus 9
      ],
      [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]],
      [
        /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i, // HTC

        // ZTE
        /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
        /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i, // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
      ],
      [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]],
      [
        // Acer
        /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i,
      ],
      [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]],
      [
        // Meizu
        /droid.+; (m[1-5] note) bui/i,
        /\bmz-([-\w]{2,})/i,
      ],
      [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]],
      [
        // Ulefone
        /; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i,
      ],
      [MODEL, [VENDOR, 'Ulefone'], [TYPE, MOBILE]],
      [
        // MIXED
        /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,
        // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
        /(hp) ([\w ]+\w)/i, // HP iPAQ
        /(asus)-?(\w+)/i, // Asus
        /(microsoft); (lumia[\w ]+)/i, // Microsoft Lumia
        /(lenovo)[-_ ]?([-\w]+)/i, // Lenovo
        /(jolla)/i, // Jolla
        /(oppo) ?([\w ]+) bui/i, // OPPO
      ],
      [VENDOR, MODEL, [TYPE, MOBILE]],
      [
        /(kobo)\s(ereader|touch)/i, // Kobo
        /(archos) (gamepad2?)/i, // Archos
        /(hp).+(touchpad(?!.+tablet)|tablet)/i, // HP TouchPad
        /(kindle)\/([\w\.]+)/i, // Kindle
        /(nook)[\w ]+build\/(\w+)/i, // Nook
        /(dell) (strea[kpr\d ]*[\dko])/i, // Dell Streak
        /(le[- ]+pan)[- ]+(\w{1,9}) bui/i, // Le Pan Tablets
        /(trinity)[- ]*(t\d{3}) bui/i, // Trinity Tablets
        /(gigaset)[- ]+(q\w{1,9}) bui/i, // Gigaset Tablets
        /(vodafone) ([\w ]+)(?:\)| bui)/i, // Vodafone
      ],
      [VENDOR, MODEL, [TYPE, TABLET]],
      [
        /(surface duo)/i, // Surface Duo
      ],
      [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]],
      [
        /droid [\d\.]+; (fp\du?)(?: b|\))/i, // Fairphone
      ],
      [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]],
      [
        /(u304aa)/i, // AT&T
      ],
      [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]],
      [
        /\bsie-(\w*)/i, // Siemens
      ],
      [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]],
      [
        /\b(rct\w+) b/i, // RCA Tablets
      ],
      [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]],
      [
        /\b(venue[\d ]{2,7}) b/i, // Dell Venue Tablets
      ],
      [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]],
      [
        /\b(q(?:mv|ta)\w+) b/i, // Verizon Tablet
      ],
      [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]],
      [
        /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i, // Barnes & Noble Tablet
      ],
      [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]],
      [/\b(tm\d{3}\w+) b/i],
      [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]],
      [
        /\b(k88) b/i, // ZTE K Series Tablet
      ],
      [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]],
      [
        /\b(nx\d{3}j) b/i, // ZTE Nubia
      ],
      [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]],
      [
        /\b(gen\d{3}) b.+49h/i, // Swiss GEN Mobile
      ],
      [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]],
      [
        /\b(zur\d{3}) b/i, // Swiss ZUR Tablet
      ],
      [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]],
      [
        /\b((zeki)?tb.*\b) b/i, // Zeki Tablets
      ],
      [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]],
      [
        /\b([yr]\d{2}) b/i,
        /\b(dragon[- ]+touch |dt)(\w{5}) b/i, // Dragon Touch Tablet
      ],
      [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]],
      [
        /\b(ns-?\w{0,9}) b/i, // Insignia Tablets
      ],
      [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]],
      [
        /\b((nxa|next)-?\w{0,9}) b/i, // NextBook Tablets
      ],
      [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]],
      [
        /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i, // Voice Xtreme Phones
      ],
      [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]],
      [
        /\b(lvtel\-)?(v1[12]) b/i, // LvTel Phones
      ],
      [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]],
      [
        /\b(ph-1) /i, // Essential PH-1
      ],
      [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]],
      [
        /\b(v(100md|700na|7011|917g).*\b) b/i, // Envizen Tablets
      ],
      [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]],
      [
        /\b(trio[-\w\. ]+) b/i, // MachSpeed Tablets
      ],
      [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]],
      [
        /\btu_(1491) b/i, // Rotor Tablets
      ],
      [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]],
      [
        /(shield[\w ]+) b/i, // Nvidia Shield Tablets
      ],
      [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]],
      [
        /(sprint) (\w+)/i, // Sprint Phones
      ],
      [VENDOR, MODEL, [TYPE, MOBILE]],
      [
        /(kin\.[onetw]{3})/i, // Microsoft Kin
      ],
      [[MODEL, /\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]],
      [
        /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i, // Zebra
      ],
      [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]],
      [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],
      [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]],
      [
        ///////////////////
        // SMARTTVS
        ///////////////////

        /smart-tv.+(samsung)/i, // Samsung
      ],
      [VENDOR, [TYPE, SMARTTV]],
      [/hbbtv.+maple;(\d+)/i],
      [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]],
      [
        /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i, // LG SmartTV
      ],
      [[VENDOR, LG], [TYPE, SMARTTV]],
      [
        /(apple) ?tv/i, // Apple TV
      ],
      [VENDOR, [MODEL, APPLE + ' TV'], [TYPE, SMARTTV]],
      [
        /crkey/i, // Google Chromecast
      ],
      [[MODEL, CHROME + 'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]],
      [
        /droid.+aft(\w+)( bui|\))/i, // Fire TV
      ],
      [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]],
      [
        /\(dtv[\);].+(aquos)/i,
        /(aquos-tv[\w ]+)\)/i, // Sharp
      ],
      [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],
      [
        /(bravia[\w ]+)( bui|\))/i, // Sony
      ],
      [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]],
      [
        /(mitv-\w{5}) bui/i, // Xiaomi
      ],
      [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]],
      [
        /Hbbtv.*(technisat) (.*);/i, // TechniSAT
      ],
      [VENDOR, MODEL, [TYPE, SMARTTV]],
      [
        /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i, // Roku
        /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i, // HbbTV devices
      ],
      [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]],
      [
        /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i, // SmartTV from Unidentified Vendors
      ],
      [[TYPE, SMARTTV]],
      [
        ///////////////////
        // CONSOLES
        ///////////////////

        /(ouya)/i, // Ouya
        /(nintendo) ([wids3utch]+)/i, // Nintendo
      ],
      [VENDOR, MODEL, [TYPE, CONSOLE]],
      [
        /droid.+; (shield) bui/i, // Nvidia
      ],
      [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]],
      [
        /(playstation [345portablevi]+)/i, // Playstation
      ],
      [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]],
      [
        /\b(xbox(?: one)?(?!; xbox))[\); ]/i, // Microsoft Xbox
      ],
      [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]],
      [
        ///////////////////
        // WEARABLES
        ///////////////////

        /((pebble))app/i, // Pebble
      ],
      [VENDOR, MODEL, [TYPE, WEARABLE]],
      [
        /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i, // Apple Watch
      ],
      [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]],
      [
        /droid.+; (glass) \d/i, // Google Glass
      ],
      [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]],
      [/droid.+; (wt63?0{2,3})\)/i],
      [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]],
      [
        /(quest( \d| pro)?)/i, // Oculus Quest
      ],
      [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]],
      [
        ///////////////////
        // EMBEDDED
        ///////////////////

        /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i, // Tesla
      ],
      [VENDOR, [TYPE, EMBEDDED]],
      [
        /(aeobc)\b/i, // Echo Dot
      ],
      [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]],
      [
        ////////////////////
        // MIXED (GENERIC)
        ///////////////////

        /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i, // Android Phones from Unidentified Vendors
      ],
      [MODEL, [TYPE, MOBILE]],
      [
        /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i, // Android Tablets from Unidentified Vendors
      ],
      [MODEL, [TYPE, TABLET]],
      [
        /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i, // Unidentifiable Tablet
      ],
      [[TYPE, TABLET]],
      [
        /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i, // Unidentifiable Mobile
      ],
      [[TYPE, MOBILE]],
      [
        /(android[-\w\. ]{0,9});.+buil/i, // Generic Android Device
      ],
      [MODEL, [VENDOR, 'Generic']],
    ],

    engine: [
      [
        /windows.+ edge\/([\w\.]+)/i, // EdgeHTML
      ],
      [VERSION, [NAME, EDGE + 'HTML']],
      [
        /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i, // Blink
      ],
      [VERSION, [NAME, 'Blink']],
      [
        /(presto)\/([\w\.]+)/i, // Presto
        /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
        /ekioh(flow)\/([\w\.]+)/i, // Flow
        /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i, // KHTML/Tasman/Links
        /(icab)[\/ ]([23]\.[\d\.]+)/i, // iCab
        /\b(libweb)/i,
      ],
      [NAME, VERSION],
      [
        /rv\:([\w\.]{1,9})\b.+(gecko)/i, // Gecko
      ],
      [VERSION, NAME],
    ],

    os: [
      [
        // Windows
        /microsoft (windows) (vista|xp)/i, // Windows (iTunes)
      ],
      [NAME, VERSION],
      [
        /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i, // Windows Phone
      ],
      [NAME, [VERSION, strMapper, windowsVersionMap]],
      [
        /windows nt 6\.2; (arm)/i, // Windows RT
        /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
        /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i,
      ],
      [[VERSION, strMapper, windowsVersionMap], [NAME, 'Windows']],
      [
        // iOS/macOS
        /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i, // iOS
        /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
        /cfnetwork\/.+darwin/i,
      ],
      [[VERSION, /_/g, '.'], [NAME, 'iOS']],
      [
        /(mac os x) ?([\w\. ]*)/i,
        /(macintosh|mac_powerpc\b)(?!.+haiku)/i, // Mac OS
      ],
      [[NAME, MAC_OS], [VERSION, /_/g, '.']],
      [
        // Mobile OSes
        /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i, // Android-x86/HarmonyOS
      ],
      [VERSION, NAME],
      [
        // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS
        /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
        /(blackberry)\w*\/([\w\.]*)/i, // Blackberry
        /(tizen|kaios)[\/ ]([\w\.]+)/i, // Tizen/KaiOS
        /\((series40);/i, // Series 40
      ],
      [NAME, VERSION],
      [
        /\(bb(10);/i, // BlackBerry 10
      ],
      [VERSION, [NAME, BLACKBERRY]],
      [
        /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i, // Symbian
      ],
      [VERSION, [NAME, 'Symbian']],
      [
        /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i, // Firefox OS
      ],
      [VERSION, [NAME, FIREFOX + ' OS']],
      [
        /web0s;.+rt(tv)/i,
        /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i, // WebOS
      ],
      [VERSION, [NAME, 'webOS']],
      [
        /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i, // watchOS
      ],
      [VERSION, [NAME, 'watchOS']],
      [
        // Google Chromecast
        /crkey\/([\d\.]+)/i, // Google Chromecast
      ],
      [VERSION, [NAME, CHROME + 'cast']],
      [
        /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i, // Chromium OS
      ],
      [[NAME, CHROMIUM_OS], VERSION],
      [
        // Smart TVs
        /panasonic;(viera)/i, // Panasonic Viera
        /(netrange)mmh/i, // Netrange
        /(nettv)\/(\d+\.[\w\.]+)/i, // NetTV

        // Console
        /(nintendo|playstation) ([wids345portablevuch]+)/i, // Nintendo/Playstation
        /(xbox); +xbox ([^\);]+)/i, // Microsoft Xbox (360, One, X, S, Series X, Series S)

        // Other
        /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i, // Joli/Palm
        /(mint)[\/\(\) ]?(\w*)/i, // Mint
        /(mageia|vectorlinux)[; ]/i, // Mageia/VectorLinux
        /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
        // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
        /(hurd|linux) ?([\w\.]*)/i, // Hurd/Linux
        /(gnu) ?([\w\.]*)/i, // GNU
        /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
        /(haiku) (\w+)/i, // Haiku
      ],
      [NAME, VERSION],
      [
        /(sunos) ?([\w\.\d]*)/i, // Solaris
      ],
      [[NAME, 'Solaris'], VERSION],
      [
        /((?:open)?solaris)[-\/ ]?([\w\.]*)/i, // Solaris
        /(aix) ((\d)(?=\.|\)| )[\w\.])*/i, // AIX
        /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i, // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS
        /(unix) ?([\w\.]*)/i, // UNIX
      ],
      [NAME, VERSION],
    ],
  };

  /////////////////
  // Constructor
  ////////////////

  let UAParser = function(ua, extensions) {
    if (typeof ua === OBJ_TYPE) {
      extensions = ua;
      ua = undefined;
    }

    if (!(this instanceof UAParser)) {
      return new UAParser(ua, extensions).getResult();
    }

    let _navigator =
      typeof window !== UNDEF_TYPE && window.navigator
        ? window.navigator
        : undefined;
    let _ua =
      ua || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);
    let _uach =
      _navigator && _navigator.userAgentData
        ? _navigator.userAgentData
        : undefined;
    let _rgxmap = extensions ? extend(regexes, extensions) : regexes;
    let _isSelfNav = _navigator && _navigator.userAgent == _ua;

    this.getBrowser = function() {
      let _browser = {};
      _browser[NAME] = undefined;
      _browser[VERSION] = undefined;
      rgxMapper.call(_browser, _ua, _rgxmap.browser);
      _browser[MAJOR] = majorize(_browser[VERSION]);
      // Brave-specific detection
      if (
        _isSelfNav &&
        _navigator &&
        _navigator.brave &&
        typeof _navigator.brave.isBrave == FUNC_TYPE
      ) {
        _browser[NAME] = 'Brave';
      }
      return _browser;
    };
    this.getCPU = function() {
      let _cpu = {};
      _cpu[ARCHITECTURE] = undefined;
      rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
      return _cpu;
    };
    this.getDevice = function() {
      let _device = {};
      _device[VENDOR] = undefined;
      _device[MODEL] = undefined;
      _device[TYPE] = undefined;
      rgxMapper.call(_device, _ua, _rgxmap.device);
      if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
        _device[TYPE] = MOBILE;
      }
      // iPadOS-specific detection: identified as Mac, but has some iOS-only properties
      if (
        _isSelfNav &&
        _device[MODEL] == 'Macintosh' &&
        _navigator &&
        typeof _navigator.standalone !== UNDEF_TYPE &&
        _navigator.maxTouchPoints &&
        _navigator.maxTouchPoints > 2
      ) {
        _device[MODEL] = 'iPad';
        _device[TYPE] = TABLET;
      }
      return _device;
    };
    this.getEngine = function() {
      let _engine = {};
      _engine[NAME] = undefined;
      _engine[VERSION] = undefined;
      rgxMapper.call(_engine, _ua, _rgxmap.engine);
      return _engine;
    };
    this.getOS = function() {
      let _os = {};
      _os[NAME] = undefined;
      _os[VERSION] = undefined;
      rgxMapper.call(_os, _ua, _rgxmap.os);
      if (
        _isSelfNav &&
        !_os[NAME] &&
        _uach &&
        _uach.platform &&
        _uach.platform != 'Unknown'
      ) {
        _os[NAME] = _uach.platform
          .replace(/chrome os/i, CHROMIUM_OS)
          .replace(/macos/i, MAC_OS); // backward compatibility
      }
      return _os;
    };
    this.getResult = function() {
      return {
        ua: this.getUA(),
        browser: this.getBrowser(),
        engine: this.getEngine(),
        os: this.getOS(),
        device: this.getDevice(),
        cpu: this.getCPU(),
      };
    };
    this.getUA = function() {
      return _ua;
    };
    this.setUA = function(ua) {
      _ua =
        typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH
          ? trim(ua, UA_MAX_LENGTH)
          : ua;
      return this;
    };
    this.setUA(_ua);
    return this;
  };

  UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);
  UAParser.CPU = enumerize([ARCHITECTURE]);
  UAParser.DEVICE = enumerize([
    MODEL,
    VENDOR,
    TYPE,
    CONSOLE,
    MOBILE,
    SMARTTV,
    TABLET,
    WEARABLE,
    EMBEDDED,
  ]);
  UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);

  ///////////
  // Export
  //////////

  // check js environment
  if (typeof exports !== UNDEF_TYPE) {
    // nodejs env
    if ("object" !== UNDEF_TYPE && module.exports) {
      exports = module.exports = UAParser;
    }
    exports.UAParser = UAParser;
  } else {
    // requirejs env (optional)
    if ("function" === FUNC_TYPE && __webpack_require__.amdO) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
        return UAParser;
      }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof window !== UNDEF_TYPE) {
      // browser env
      window.UAParser = UAParser;
    }
  }

  // jQuery/Zepto specific (optional)
  // Note:
  //   In AMD env the global scope should be kept clean, but jQuery is an exception.
  //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
  //   and we should catch that.
  let $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);
  if ($ && !$.ua) {
    let parser = new UAParser();
    $.ua = parser.getResult();
    $.ua.get = function() {
      return parser.getUA();
    };
    $.ua.set = function(ua) {
      parser.setUA(ua);
      let result = parser.getResult();
      for (let prop in result) {
        $.ua[prop] = result[prop];
      }
    };
  }
})(typeof window === 'object' ? window : this);


/***/ }),
/* 5 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   callUserLearningPlanStatusApi: () => (/* binding */ callUserLearningPlanStatusApi),
/* harmony export */   callUserLearningPlansApi: () => (/* binding */ callUserLearningPlansApi),
/* harmony export */   getUserDigitalCredentials: () => (/* binding */ getUserDigitalCredentials),
/* harmony export */   loadUserLearningPlans: () => (/* binding */ loadUserLearningPlans),
/* harmony export */   searchDigitalCredential: () => (/* binding */ searchDigitalCredential)
/* harmony export */ });
/* harmony import */ var _call_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);


async function searchDigitalCredential(event, webChatInstance, tenant, searchType, TOKEN) {
  const data = {
    token: TOKEN,
    tenant: tenant,
    digitalCredentialSearchKeyword: event.data.context.skills['actions skill'].skill_variables.Digital_Credential_Search_Keyword,
    searchType: searchType,
  };
  const searchUrl = "https://chatbot.5bcb70fa.public.multi-containers.ibm.com" + '/digitalCredential/search';

  let Digital_Credential_Search_Success_Status = false;
  let Digital_Credential_Search_Success_Status_Text = '';

  await (0,_call_api_js__WEBPACK_IMPORTED_MODULE_0__.postData)(searchUrl, data).then((result) => {
    if (result.exception) {
      Digital_Credential_Search_Success_Status_Text = 'Search unsuccessful due to server error';
      Digital_Credential_Search_Success_Status = false;
    } else {
      // console.log(result); // JSON data parsed by `data.json()` call
      if (result.success === true) {
        Digital_Credential_Search_Success_Status_Text = result.message;
        Digital_Credential_Search_Success_Status = true;
      } else {
        Digital_Credential_Search_Success_Status_Text = result.message;
        Digital_Credential_Search_Success_Status = false;
      }
    }
  });

  const sendObject = {
    input: {
      message_type: 'text',
      text: Digital_Credential_Search_Success_Status_Text
    },
    context: {
      skills: {
        ['actions skill']: {
          skill_variables: {
            Digital_Credential_Search_Success_Status: Digital_Credential_Search_Success_Status,
            Digital_Credential_Search_Success_Status_Text: Digital_Credential_Search_Success_Status_Text,
          }
        }
      }
    }
  };
  // Reset the variable so that the function is not called again
  if (searchType === 'ByName') {
    sendObject['context']['skills']['actions skill']['skill_variables']['Digital_Credential_Search_By_Name_Confirm'] = false;
  } else {
    sendObject['context']['skills']['actions skill']['skill_variables']['Digital_Credential_Search_By_Id_Confirm'] = false;
  }
  const sendOptions = {
    silent: true
  };
  webChatInstance.send(sendObject, sendOptions);
}

async function callUserLearningPlansApi(tenant, TOKEN) {
  // console.log(event);
  // To send OTP code
  const data = {
    token: TOKEN,
    tenant: tenant,
  };
  const searchUrl = "https://chatbot.5bcb70fa.public.multi-containers.ibm.com" + '/digitalCredential/getUserLearningPlans';

  let returnResult;
  await (0,_call_api_js__WEBPACK_IMPORTED_MODULE_0__.postData)(searchUrl, data).then((result) => {
    returnResult = result;
  });

  return returnResult;
}

async function callUserLearningPlanStatusApi(planId, tenant, TOKEN) {
  // console.log(event);
  // To send OTP code
  const data = {
    token: TOKEN,
    tenant: tenant,
    planId: planId,
  };
  const searchUrl = "https://chatbot.5bcb70fa.public.multi-containers.ibm.com" + '/digitalCredential/getUserLearningPlanStatus';

  let returnResult;
  await (0,_call_api_js__WEBPACK_IMPORTED_MODULE_0__.postData)(searchUrl, data).then((result) => {
    returnResult = result;
  });

  return returnResult;
}

async function loadUserLearningPlans(webChatInstance, tenant, TOKEN) {
  await callUserLearningPlansApi(tenant, TOKEN).then((result) => {
    const sendObject = {
      input: {
        message_type: 'text',
        text: result.message
      },
      context: {
        skills: {
          ['actions skill']: {
            skill_variables: {
              Digital_Credential_Learning_Plan_Search_Success_Status: result.success,
              Digital_Credential_Learning_Plan_Search_Success_Status_Text: result.message,
            }
          }
        }
      }
    };
  
    sendObject['context']['skills']['actions skill']['skill_variables']['Digital_Credential_Learning_Plan_List'] = result.data;
    // Reset the variable so that the function is not called again
    sendObject['context']['skills']['actions skill']['skill_variables']['Digital_Credential_Learning_Plan_Search_Confirm'] = false;
    const sendOptions = {
      silent: true
    };
    webChatInstance.send(sendObject, sendOptions);
  });
}

async function getUserDigitalCredentials(webChatInstance, tenant, TOKEN) {
  const data = {
    token: TOKEN,
    tenant: tenant,
  };
  const searchUrl = "https://chatbot.5bcb70fa.public.multi-containers.ibm.com" + '/digitalCredential/getUserDigitalCredentials';
  let userDigitalCredentials;
  await (0,_call_api_js__WEBPACK_IMPORTED_MODULE_0__.postData)(searchUrl, data).then((result) => {
    userDigitalCredentials = result.data;
  });

  const sendObject = {
    input: {
      message_type: 'text',
      text: 'success'
    },
    context: {
      skills: {
        ['actions skill']: {
          skill_variables: {
            User_Badges: userDigitalCredentials,
            Load_User_Badges: false
          }
        }
      }
    }
  };
  const sendOptions = {
    silent: true
  };
  webChatInstance.send(sendObject, sendOptions);
}



/***/ }),
/* 6 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getJWT: () => (/* binding */ getJWT)
/* harmony export */ });
/* harmony import */ var _call_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);


/**
  * This is the function that is called when a new identity token is needed.
  */
async function getJWT(userProfile, tenant, environment) {
    // In a real environment, this will make a call to your server to request a new JWT. In our example, this JWT
    // has an expiration time of 10 seconds to demonstrate that this function will be called when the token expires.
    const url = "https://chatbot.5bcb70fa.public.multi-containers.ibm.com" + '/createJWT';
    const data = {
        id: userProfile.Cnum,
        email: userProfile.Email,
        tenant: tenant,
        environment: environment,

    };
    // const result = await getData(process.env.MIDDLEWARE_API_ROOT + '/createJWT?email=' + userProfile.Email + '&id=' + userProfile.Cnum);
    const result = await (0,_call_api_js__WEBPACK_IMPORTED_MODULE_0__.postData)(url, data);
    return await result.jwtString;
}



/***/ }),
/* 7 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   verifySpamConversation: () => (/* binding */ verifySpamConversation)
/* harmony export */ });
/* harmony import */ var _call_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);


async function verifySpamConversation(webChatInstance, userProfile, inputText, tenant) {
  return new Promise((resolve, reject) => {
      (async () => {
        if (inputText !== "Spam detected") {
          let data = {
            email: userProfile.Email,
            inputText: inputText,
            tenant: tenant,
          };

          const url = "https://chatbot.5bcb70fa.public.multi-containers.ibm.com" + '/verifySpamConversation';
          await (0,_call_api_js__WEBPACK_IMPORTED_MODULE_0__.postData)(url, data).then((result) => {
            let detectedSpam = false;
            if (result.exception) {
              detectedSpam = false;
            } else {
              if (result.success === true) {
                if (result.spam === true) {
                  detectedSpam = true;
                }
              } else {
                detectedSpam = false;
              }
            }
            return resolve(detectedSpam);
            // return detectedSpam;
            /* if (detectedSpam) {
              const sendObject = {
                input: {
                  message_type: 'text',
                  text: 'Spam detected'
                }
              };
              const sendOptions = {
                silent: true
              };
              webChatInstance.send(sendObject, sendOptions);
            }*/
          });
        }
      })();
  })
}



/***/ }),
/* 8 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   generateCourseCategoryList: () => (/* binding */ generateCourseCategoryList)
/* harmony export */ });
/* harmony import */ var _call_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);


async function generateCourseCategoryList(event, courseInfo, tenant) {
  let courseCategory = [];
  let courseList = [];
  let courseCatalog = {};
  let courseCatalogSelected = {};
  if (event.data.context.skills['actions skill'].skill_variables.Course_Category_Generate === true) {
    const courseCatalogJson = await (0,_call_api_js__WEBPACK_IMPORTED_MODULE_0__.getData)("https://chatbot.5bcb70fa.public.multi-containers.ibm.com" + '/getCourseCatalog?tenant=' + tenant);
    // Check for empty object
    if (Object.keys(courseCatalogJson).length !== 0) {
      courseCatalog = courseCatalogJson.courseCatalog;
      courseCatalog.forEach((currentValue, index) => {
        if (courseCategory.indexOf(currentValue['category']) === -1) {
          courseCategory.push(currentValue['category']);
        }
      });
    }
  } else {
    if (typeof(courseInfo.courseCategory) !== 'undefined') {
      courseCategory = courseInfo.courseCategory;
      courseCatalog = courseInfo.courseCatalog;
    }
  }
  
  if (
    event.data.input?.text &&
    courseCategory.indexOf(event.data.input.text) >= 0
  ) {
    courseList = [];
    courseCatalog.forEach((currentValue, index) => {
      if (
        courseList.indexOf(currentValue['courseName']) === -1 &&
        currentValue['category'] === event.data.history.label
      ) {
        courseList.push(currentValue['courseName']);
      }
    });
    // reset course list
    courseInfo.courseList = courseList;
  }

  if (typeof(courseInfo.courseCategory) !== 'undefined' && courseInfo.courseList.length > 0) {
    courseList = courseInfo.courseList;
  }

  if (
    event.data.input?.text &&
    courseList.indexOf(event.data.input.text) >= 0
  ) {
    const index = courseCatalog.findIndex(
      x => x['courseName'] == event.data.history.label
    );
    courseCatalogSelected.Course_Name = courseCatalog[index]['courseName'];
    let imageSource = courseCatalog[index]['image'].split('/').pop();
    imageSource =
      "https://chatbot.5bcb70fa.public.multi-containers.ibm.com" + '/static/images/course-images/' + imageSource;
    courseCatalogSelected.Course_Image =
      '<div class="WAC__message--padding"><div class="WAC__bot-message"><div class="WAC__bot-bar WAC__message-vertical-padding"></div><div class="WAC__received WAC__message-vertical-padding WAC__received--image"><div class="WAC__received--inner"><div class="WACImage"><div class="WACImage__ImageWrapper"><img class="WACImage__Image WACImage__Image--loaded" src="' +
      imageSource +
      '" alt="" style="display: block;"></div></div></div></div></div></div>';
    courseCatalogSelected.Course_Duration = courseCatalog[index]['duration'];
    courseCatalogSelected.Course_Activities = courseCatalog[index]['activities'];
    courseCatalogSelected.Course_Language = courseCatalog[index]['languageSupported'];
    courseCatalogSelected.Course_Type = courseCatalog[index]['courseType'];
    courseCatalogSelected.Course_Hyperlink =
      '<a class="btn" href="' +
      courseCatalog[index]['activityLinks'] +
      '" target="_blank" rel="noopener noreferrer">Course Page</a>';
  }

  return {courseCategory: courseCategory, courseList: courseList, courseCatalog: courseCatalog, courseCatalogSelected: courseCatalogSelected};
}



/***/ }),
/* 9 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fileUploadCustomResponseHandler: () => (/* binding */ fileUploadCustomResponseHandler)
/* harmony export */ });
/* harmony import */ var _call_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);


function fileUploadCustomResponseHandler(
  event,
  webChatInstance,
  fileUploadInstanceNo
) {
  const { element } = event.data;
  let uploadedFileNo = 1;
  let uploadedFilesInfo = [];

  element.innerHTML = `
        <div id="uploadFileGroup_${fileUploadInstanceNo}">
            <p id="uploadFileError_${fileUploadInstanceNo}" style="color: red">
            </p>
            <input type="file" accept="image/jpeg,image/png,image/gif,video/mp4,video/quicktime,application/msword,
            application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel,
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/pdf,
            application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation"
            id="uploadInput_${fileUploadInstanceNo}" multiple="multiple" style="display: none;">
            <div class="WAC__button-holder">
              <button type="button" id="uploadButton_${fileUploadInstanceNo}" class="WAC__button--primary WAC__button--primaryMd cds--btn cds--btn--primary cds--btn--md cds--layout--size-md"> Upload Files </button>
              <button type="button" id="finishUploadButton_${fileUploadInstanceNo}" class="WAC__button--primary WAC__button--primaryMd cds--btn cds--btn--primary cds--btn--md cds--layout--size-md"> Finish Upload </button>
            </div>
        </div>`;

  const uploadFileGroup = element.querySelector(
    `#uploadFileGroup_${fileUploadInstanceNo}`
  );
  const uploadInput = element.querySelector(
    `#uploadInput_${fileUploadInstanceNo}`
  );
  const uploadButton = element.querySelector(
    `#uploadButton_${fileUploadInstanceNo}`
  );
  const finishUploadButton = element.querySelector(
    `#finishUploadButton_${fileUploadInstanceNo}`
  );
  uploadButton.addEventListener('click', () => {
    uploadInput.click();
  });
  uploadInput.addEventListener('change', event => {
    const selectedFiles = event.target.files;
    // loop through all the selected files
    let selectedFile;
    let uploadFileStatusHtml;
    let currentFileUploadNo = 0;
    const uploadFileError = document.getElementById(
      `uploadFileError_${fileUploadInstanceNo}`
    );
    if (uploadedFilesInfo.length >= 8 || selectedFiles.length > 8) {
      uploadFileError.innerText = 'Maximum 8 files can be uploaded';
    } else {
      uploadFileError.innerText = '';
    }
    // Uploaded file array updated after succesful upload, so the length check is 1 less
    while (
      currentFileUploadNo < selectedFiles.length &&
      selectedFiles.length <= 8 &&
      uploadedFilesInfo.length <= 7
    ) {
      selectedFile = selectedFiles[currentFileUploadNo];
      uploadFileStatusHtml = `
        <div id="uploadFileGroupStatus_${fileUploadInstanceNo}_${uploadedFileNo}">
            <p id="uploadFileStatus_${fileUploadInstanceNo}_${uploadedFileNo}">
            </p>
            <p>
              <progress id="uploadFileProgress_${fileUploadInstanceNo}_${uploadedFileNo}" style="display: none;">
              </progress>
              <a href="#" style="margin-left: .5em; display: none;" id="uploadFileAbort_${fileUploadInstanceNo}_${uploadedFileNo}">
                <svg focusable="false" preserveAspectRatio="xMidYMid meet" fill="#da1e28" 
                width="24" height="24" viewBox="0 0 24 24" aria-hidden="true" 
                xmlns="http://www.w3.org/2000/svg">
                <path d="M12,1C6,1,1,6,1,12s5,11,11,11s11-4.9,11-11S18.1,1,12,1z M16.2,17.5L12,13.3l-4.2,4.2l-1.3-1.3l4.2-4.2L6.5,7.8l1.3-1.3 l4.2,4.2l4.2-4.2l1.3,1.3L13.3,12l4.2,4.2L16.2,17.5z"></path>
                <path fill="none" d="M16.2,17.5L12,13.3l-4.2,4.2l-1.3-1.3l4.2-4.2L6.5,7.8l1.3-1.3l4.2,4.2l4.2-4.2l1.3,1.3 L13.3,12l4.2,4.2L16.2,17.5z" data-icon-path="inner-path" opacity="0"></path>
                </svg>
              </a>
            </p>
            <p>
              <output id="uploadFileOutput_${fileUploadInstanceNo}_${uploadedFileNo}" />
            </p>
        </div>`;
      uploadFileGroup.insertAdjacentHTML('beforebegin', uploadFileStatusHtml);
      uploadFileFromAsst(selectedFile, uploadedFileNo);
      uploadedFileNo++;
      currentFileUploadNo++;
    }
  });
  finishUploadButton.addEventListener('click', () => {
    if (uploadedFilesInfo.length <= 8) {
      let displayFileName = '';
      let originalFileName = '';
      let fileUploadSuccess = false;
      let fileUploadStatusText = 'No file uploaded';
      if (uploadedFilesInfo.length > 0) {
        displayFileName =
          '<ul style="list-style-type: none;padding: 0;margin: 0">';
        uploadedFilesInfo.forEach(value => {
          displayFileName += '<li>' + value.displayFileName + '</li>';
          originalFileName += ':' + value.originalFileName;
        });
        displayFileName += '</ul>';
        originalFileName = originalFileName.substring(1);
        fileUploadSuccess = true;
        fileUploadStatusText = 'File uploaded successfully';
      }
      const skillVariables = {
        Support_Ticket_Screenshot_File_Display_Name: displayFileName,
        Support_Ticket_Screenshot_File_Original_Name: originalFileName,
        Support_Ticket_Screenshot_File_Upload_Success: fileUploadSuccess,
        Support_Ticket_Screenshot_File_Upload_Status_Text: fileUploadStatusText,
      };
      messageChatbot(fileUploadStatusText, skillVariables, true);
    }
  });

  function uploadFileFromAsst(selectedFile, uploadedFileNo) {
    const formData = new FormData();
    formData.append('uploaded_file', selectedFile);
    const uploadStatus = {
      displayFileName: selectedFile.name,
      success: false,
      uploadedFileNo: uploadedFileNo,
      originalFileName: '',
      msg: '',
    };
    const abortButton = document.getElementById(
      `uploadFileAbort_${fileUploadInstanceNo}_${uploadedFileNo}`
    );
    const uploadFileStatus = document.getElementById(
      `uploadFileStatus_${fileUploadInstanceNo}_${uploadedFileNo}`
    );
    const progressBar = document.getElementById(
      `uploadFileProgress_${fileUploadInstanceNo}_${uploadedFileNo}`
    );
    const log = document.getElementById(
      `uploadFileOutput_${fileUploadInstanceNo}_${uploadedFileNo}`
    );
    const xhr = new XMLHttpRequest();
    xhr.timeout = 5000; // 2 seconds
    // Link abort button
    abortButton.addEventListener(
      'click',
      () => {
        xhr.abort();
      },
      {
        once: true,
      }
    );
    // When the upload starts, we display the progress bar
    xhr.upload.addEventListener('loadstart', event => {
      progressBar.style = 'display: inline;';
      progressBar.value = 0;
      progressBar.max = event.total;
      log.textContent = 'Uploading (0%)…';
      abortButton.style = 'margin-left: .5em; display: inline;';
    });
    // Each time a progress event is received, we update the bar
    xhr.upload.addEventListener('progress', event => {
      progressBar.value = event.loaded;
      log.textContent = `Uploading (${(
        (event.loaded / event.total) *
        100
      ).toFixed(2)}%)…`;
    });
    // When the upload is finished, we hide the progress bar.
    xhr.upload.addEventListener('loadend', event => {
      progressBar.style = 'display: none;';
      if (event.loaded !== 0) {
        log.style = 'display: none;';
      }
      abortButton.style = 'margin-left: .5em; display: none;';
    });
    // In case of an error, an abort, or a timeout, we hide the progress bar
    // Note that these events can be listened to on the xhr object too
    function errorAction(event) {
      progressBar.style = 'display: none;';
      log.textContent = `Upload failed: ${event.type}`;
    }
    xhr.upload.addEventListener('error', errorAction);
    xhr.upload.addEventListener('abort', errorAction);
    xhr.upload.addEventListener('timeout', errorAction);
    xhr.open('POST', "https://chatbot.5bcb70fa.public.multi-containers.ibm.com" + '/upload', true);
    xhr.onreadystatechange = () => {
      // In local files, status is 0 upon success in Mozilla Firefox
      if (xhr.readyState === XMLHttpRequest.DONE) {
        const status = xhr.status;
        if (status === 0 || (status >= 200 && status < 400)) {
          // The request has been completed successfully
          const data = JSON.parse(xhr.responseText);
          abortButton.disabled = true;
          uploadStatus.originalFileName = data['fileName'];
          uploadStatus.msg = data['msg'] ? data['msg'] : '';
          if (data['success']) {
            uploadStatus.success = true;
            uploadFileStatus.innerHTML = `<a href="${
              "https://chatbot.5bcb70fa.public.multi-containers.ibm.com"
            }/${uploadStatus.originalFileName}/downloadScreenshot" download>${
              uploadStatus.displayFileName
            }</a> file uploaded successfully`;
            uploadFileStatus.style = 'color: green';
            // Add file delete button
            const btn = document.createElement('a');
            btn.innerHTML = `<svg focusable="false" preserveAspectRatio="xMidYMid meet" fill="#da1e28" 
            width="24" height="24" viewBox="0 0 24 24" aria-hidden="true" 
            xmlns="http://www.w3.org/2000/svg">
            <path d="M12,1C6,1,1,6,1,12s5,11,11,11s11-4.9,11-11S18.1,1,12,1z M16.2,17.5L12,13.3l-4.2,4.2l-1.3-1.3l4.2-4.2L6.5,7.8l1.3-1.3 l4.2,4.2l4.2-4.2l1.3,1.3L13.3,12l4.2,4.2L16.2,17.5z"></path>
            <path fill="none" d="M16.2,17.5L12,13.3l-4.2,4.2l-1.3-1.3l4.2-4.2L6.5,7.8l1.3-1.3l4.2,4.2l4.2-4.2l1.3,1.3 L13.3,12l4.2,4.2L16.2,17.5z" data-icon-path="inner-path" opacity="0"></path>
            </svg>`;
            btn.setAttribute('href', '#');
            btn.setAttribute('style', 'margin-left: .5em;');
            btn.onclick = async function(el) {
              const uploadFileError = document.getElementById(
                `uploadFileError_${fileUploadInstanceNo}`
              );
              if (uploadedFilesInfo.length <= 8) {
                uploadFileError.innerText = '';
              }
              const fileRemoveStatus = await (0,_call_api_js__WEBPACK_IMPORTED_MODULE_0__.getData)(
                "https://chatbot.5bcb70fa.public.multi-containers.ibm.com" +
                  `/${uploadStatus.originalFileName}/removeScreenshot`
              );
              if (fileRemoveStatus.success === true) {
                uploadedFilesInfo.find((currentValue, index) => {
                  if (
                    currentValue.originalFileName ===
                    uploadStatus.originalFileName
                  ) {
                    // Remove the item from array
                    uploadedFilesInfo.splice(index, 1);
                    // Remove the file upload div
                    const uploadFileGroupStatus = document.getElementById(
                      `uploadFileGroupStatus_${fileUploadInstanceNo}_${
                        currentValue.uploadedFileNo
                      }`
                    );
                    uploadFileGroupStatus.remove();
                    return true;
                  }
                });
              }
            };
            // append button inside the div
            uploadFileStatus.appendChild(btn);
          } else {
            uploadFileStatus.innerText =
              uploadStatus.displayFileName + ` file upload failed `;
            uploadFileStatus.style = 'color: red';
          }
          uploadedFilesInfo.push(uploadStatus);
        } else {
          // Oh no! There has been an error with the request! It's already handled by error function
        }
      }
    };
    xhr.send(formData);
  }

  function messageChatbot(txt, skillVariables = {}, silent = false) {
    const maxChars = 2040;
    txt = txt.substring(0, maxChars);
    let send_obj = {
      input: {
        message_type: 'text',
        text: txt,
      },
      context: {
        skills: {
          ['actions skill']: {
            skill_variables: skillVariables,
          },
        },
      },
    };

    webChatInstance.send(send_obj, { silent }).catch(function(error) {
      console.error('Sending message to chatbot failed');
    });
  }
}




/***/ }),
/* 10 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   digitalCreadentialLearningPlanListCustomResponseHandler: () => (/* binding */ digitalCreadentialLearningPlanListCustomResponseHandler)
/* harmony export */ });
/* harmony import */ var _digital_credential_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);


async function digitalCreadentialLearningPlanListCustomResponseHandler(
  event,
  webChatInstance,
  tenant,
  TOKEN
) {
  const { element, fullMessage } = event.data;
  const learningPlans =
    event.data.fullMessage.context.skills['actions skill'].skill_variables
      .Digital_Credential_Learning_Plan_List;
  let learningPlanCardSelected = false;
  let skillVariables = {};

  let learningPlanCard = document.createElement('div');
  let learningPlanCardHead = document.createElement('p');
  learningPlanCardHead.innerHTML = `Can't find your learning plan? 
  <span style="font-weight: bold; color: blue;">Search by Learning Plan Name.</span>`;
  learningPlanCard.appendChild(learningPlanCardHead);
  learningPlanCard.classList.add('CustomCard');
  learningPlanCard.addEventListener('click', () => {
    const statusText = `Search by Learning Plan Name`;
    skillVariables = {
      Digital_Credential_Learning_Plan_Status: 'Custom',
      Digital_Credential_Learning_Plan_Status_Text: statusText,
    };
    messageChatbot(statusText, skillVariables);
    webChatInstance.updateHistoryUserDefined(fullMessage.id, {
      selectedIndex: 0,
    });
  });
  element.appendChild(learningPlanCard);

  learningPlans.forEach((item, index) => {
    learningPlanCard = document.createElement('div');
    learningPlanCardHead = document.createElement('p');
    learningPlanCardHead.innerText = item['text'];
    learningPlanCardHead.setAttribute('style', 'color: blue');
    /* const learningPlanCardUrl = document.createElement('a');
    learningPlanCardUrl.setAttribute('href', item['url']);
    learningPlanCardUrl.setAttribute('target', '_blank');
    learningPlanCardUrl.setAttribute('rel', 'noopener noreferrer');
    learningPlanCardUrl.innerText = item['text'];
    learningPlanCardUrl.addEventListener("click", (e) => {
      e.stopPropagation();
    });*/
    learningPlanCard.appendChild(learningPlanCardHead);
    const pElement1 = document.createElement('p');
    if (item['transcriptStatus'] === 'Completed') {
      pElement1.innerHTML = `<span style="font-weight: bold;">Status:</span> <span style="color: green">${
        item['transcriptStatus']
      }</span>`;
    } else {
      pElement1.innerHTML = `<span style="font-weight: bold;">Status:</span> <span style="color: orange">${
        item['transcriptStatus']
      }</span>`;
    }
    learningPlanCard.appendChild(pElement1);
    const pElement2 = document.createElement('p');
    pElement2.innerHTML = `<span style="font-weight: bold;">Completion:</span> ${
      item['percentOfLearningComplete']
    }%`;
    learningPlanCard.appendChild(pElement2);
    /* learningPlanCard.innerHTML = `
    <a href="${item['url']}" target="_blank" rel="noopener noreferrer">${item['text']}</a>
    <br />
    Status: ${item['transcriptStatus']}
    <br />
    Completion Percentage: ${item['percentOfLearningComplete']}
    `;*/
    learningPlanCard.classList.add('CustomCard');
    learningPlanCard.addEventListener('click', () => {
      if (!learningPlanCardSelected) {
        learningPlanCardSelected = true;
        if (item['transcriptStatus'] === 'Completed') {
          (async () => {
            await (0,_digital_credential_js__WEBPACK_IMPORTED_MODULE_0__.callUserLearningPlanStatusApi)(item['id'], tenant, TOKEN).then(
              result => {
                if (result.success) {
                  skillVariables = {
                    Digital_Credential_Search_By_Id_Confirm: true,
                    Digital_Credential_Learning_Plan_Status: 'Completed',
                    Digital_Credential_Learning_Plan_Status_Text:
                      result.message,
                    Digital_Credential_Search_Keyword: result.data,
                  };
                } else {
                  skillVariables = {
                    Digital_Credential_Learning_Plan_Status: 'Error',
                    Digital_Credential_Learning_Plan_Status_Text:
                      result.message,
                  };
                }
                messageChatbot(item['text'], skillVariables);
                webChatInstance.updateHistoryUserDefined(fullMessage.id, {
                  selectedIndex: index + 1,
                });
              }
            );
          })();
        } else {
          skillVariables = {
            Digital_Credential_Learning_Plan_Status: 'Progress',
            Digital_Credential_Learning_Plan_Status_Text: `<a href="${
              item['url']
            }" target="_self" rel="noopener noreferrer">${item['text']}</a>`,
          };
          messageChatbot(item['text'], skillVariables);
          webChatInstance.updateHistoryUserDefined(fullMessage.id, {
            selectedIndex: index,
          });
        }
      }
    });

    element.appendChild(learningPlanCard);
  });

  function messageChatbot(txt, skillVariables = {}, silent = false) {
    const maxChars = 2040;
    txt = txt.substring(0, maxChars);
    let send_obj = {
      input: {
        message_type: 'text',
        text: txt,
      },
      context: {
        skills: {
          ['actions skill']: {
            skill_variables: skillVariables,
          },
        },
      },
    };

    webChatInstance.send(send_obj, { silent }).catch(function(error) {
      console.error('Sending message to chatbot failed');
    });
  }
}




/***/ }),
/* 11 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createHomeScreenQuickLinks: () => (/* binding */ createHomeScreenQuickLinks)
/* harmony export */ });

/**
 * This function will set up the quick links those will be displayed on the home screen.
 */
function createHomeScreenQuickLinks(instance) {
  const title = document.createElement('div');
  title.classList.add('HSQLTitle');
  title.innerHTML = 'Quick Links';

  const articles = document.createElement('div');
  articles.classList.add('HSQLLinks');
  const aiIcon = `
    <?xml version="1.0" encoding="UTF-8"?>
    <svg id="icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
      <defs>
        <style>
          .cls-1 {
            fill: none;
          }
        </style>
      </defs>
      <title>
        AI Ethics
      </title>
      <path d="M19,21v-2h1v-7h-1v-2h4v2h-1v7h1v2h-4Z"/>
      <path d="M15.5005,21h2l-3.5005-11h-3l-3.4966,11h1.9988l.6018-2h4.7781l.6184,2ZM10.7058,17l1.6284-5.4111.2559-.0024,1.6736,5.4136h-3.5579Z"/>
      <path d="M32,32H0V0h32v32ZM2,30h28V2H2v28Z"/>
      <rect id="_x3C_Transparent_Rectangle_x3E_" class="cls-1" width="32" height="32"/>
    </svg>
  `;
  const accessibilityIcon = `
    <?xml version="1.0" encoding="UTF-8"?>
    <svg id="icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
      <defs>
        <style>
          .cls-1 {
            fill:none;
          }
        </style>
      </defs>
      <title>
        IBM Accessibility
      </title>
      <polygon points="23 14 23 12 9 12 9 14 14 14 14 16.734 10.132 23.504 11.868 24.496 15.58 18 16.42 18 20.132 24.496 21.868 23.504 18 16.734 18 14 23 14"/>
      <circle cx="16" cy="9" r="2"/><path d="M16,30A14,14,0,1,1,30,16,14.0158,14.0158,0,0,1,16,30ZM16,4A12,12,0,1,0,28,16,12.0137,12.0137,0,0,0,16,4Z"/>
      <rect id="_Transparent_Rectangle_" data-name="&lt;Transparent Rectangle&gt;" class="cls-1" width="32" height="32"/>
    </svg>
  `;
  const privacyIcon = `
    <?xml version="1.0" encoding="utf-8"?>
    <svg version="1.1" id="icon" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
      width="32px" height="32px" viewBox="0 0 32 32" style="enable-background:new 0 0 32 32;" xml:space="preserve">
      <style type="text/css">
        .st0{fill:none;}
      </style>
      <title>
        IBM Privacy Statement
      </title>
      <path d="M28,22v-3c0-2.2-1.8-4-4-4s-4,1.8-4,4v3c-1.1,0-2,0.9-2,2v5c0,1.1,0.9,2,2,2h8c1.1,0,2-0.9,2-2v-5C30,22.9,29.1,22,28,22z
        M22,19c0-1.1,0.9-2,2-2s2,0.9,2,2v3h-4V19z M20,29v-5h8v5H20z"/>
      <rect x="8" y="16" width="6" height="2"/>
      <rect x="8" y="10" width="12" height="2"/>
      <path d="M26,4c0-1.1-0.9-2-2-2H4C2.9,2,2,2.9,2,4v13c0,4.1,2.2,7.8,5.8,9.7l5.2,2.8v-2.3l-4.2-2.3C5.8,23.4,4,20.3,4,17V4h20v8h2V4z
        "/>
      <rect id="_x3C_Transparent_Rectangle_x3E__155_" class="st0" width="32" height="32"/>
    </svg>
  `;
  articles.appendChild(createLink(privacyIcon, 'IBM Privacy Statement', 'https://www.ibm.com/privacy'));
  articles.appendChild(createLink(aiIcon, 'AI Ethics', 'https://www.ibm.com/impact/ai-ethics'));
  articles.appendChild(createLink(accessibilityIcon, 'IBM Accessibility', 'https://www.ibm.com/able'));

  const container = document.createElement('div');
  container.classList.add('HSQLContainer');
  container.appendChild(title);
  container.appendChild(articles);

  // This is what adds this custom content to web chat. The "homeScreenAfterStartersElement" element is a writeable
  // area that appears at the bottom of the home screen below the starters.
  instance.writeableElements.homeScreenAfterStartersElement.appendChild(container);
}

/**
 * This creates a button that can be displayed in the custom element on the home screen.
 */
function createLink(icon, label, href) {
  const link = document.createElement('a');
  link.href = href;
  link.target = '_blank'
  link.classList.add('HSQLContainer__Link');
  // All IBM Carbon class names (https://carbondesignsystem.com/) are automatically available for use inside of
  // web chat and will inherit theming values you have set on web chat.
  link.classList.add('cds--link');
  link.innerHTML = `<span class="HSQLContainer__LinkIcon">${icon}</span><span class="HSQLContainer__LinkText">${label}</span>`;
  const linkDiv = document.createElement('div');
  linkDiv.classList.add('HSQLContainer__LinkDiv');
  linkDiv.appendChild(link);
  return linkDiv;
}



/***/ }),
/* 12 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadUserTranscripts: () => (/* binding */ loadUserTranscripts)
/* harmony export */ });
/* harmony import */ var _call_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);


async function loadUserTranscripts(webChatInstance, tenant, TOKEN) {
  const data = {
    token: TOKEN,
    tenant: tenant,
  };
  const searchUrl = "https://chatbot.5bcb70fa.public.multi-containers.ibm.com" + '/getUserTranscripts';

  let userCourses;
  await (0,_call_api_js__WEBPACK_IMPORTED_MODULE_0__.postData)(searchUrl, data).then((result) => {
    userCourses = result.data;
  });

  const sendObject = {
    input: {
      message_type: 'text',
      text: 'success'
    },
    context: {
      skills: {
        ['actions skill']: {
          skill_variables: {
            User_Courses: userCourses,
            Load_User_Courses: false
          }
        }
      }
    }
  };
  const sendOptions = {
    silent: true
  };
  webChatInstance.send(sendObject, sendOptions);
}



/***/ }),
/* 13 */,
/* 14 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   closeChatWindow: () => (/* binding */ closeChatWindow)
/* harmony export */ });
async function closeChatWindow(webChatInstance) {
  const sendObject = {
    input: {
      message_type: 'text',
      text: 'success'
    },
    context: {
      skills: {
        ['actions skill']: {
          skill_variables: {
            Close_Chat_Window: false
          }
        }
      }
    }
  };
  const sendOptions = {
    silent: true
  };
  webChatInstance.send(sendObject, sendOptions);
  webChatInstance.closeWindow();
}



/***/ }),
/* 15 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   chatWindowHeight: () => (/* binding */ chatWindowHeight)
/* harmony export */ });
function chatWindowHeight() {
  return parseInt(screen.availHeight * 0.7)
}



/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_otp_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _modules_csp_ticket_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _modules_digital_credential_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _modules_identity_token_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _modules_spam_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7);
/* harmony import */ var _modules_course_category_list_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8);
/* harmony import */ var _modules_file_upload_download_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9);
/* harmony import */ var _modules_digital_creadential_learning_plan_list_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(10);
/* harmony import */ var _modules_home_screen_quick_links_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(11);
/* harmony import */ var _modules_transcript_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(12);
/* harmony import */ var _modules_close_chat_window_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(14);
/* harmony import */ var _modules_chat_window_height_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(15);













(function() {
  const MIDDLEWARE_API_ROOT = "https://chatbot.5bcb70fa.public.multi-containers.ibm.com";
  const HOMESCREEN_NOTIFICATION_ADULT = "{\"show\": false, \"message\": \"🚨 <b>Scheduled Maintenance:</b> Check the site banner for details\"}";
  const TOKEN = window.YL.JWT_VALUE;
  // let webChatInstance;
  let userProfile = {};
  let userDemographics = {};
  let courseCategory = [];
  let courseInfo = {};
  let userGroupsWithIds = {};
  let fileUploadInstanceNo = 0;
  const tenant = 'skills';

  async function receiveHandler(event) {
    // Hide the indicator.
    webChatInstance.updateIsTypingCounter('decrease');
    //console.log(event)
    // To send OTP code
    if (event.data.context.skills['actions skill'].skill_variables.Email_Address_Change_Send_OTP === true) {
      await (0,_modules_otp_js__WEBPACK_IMPORTED_MODULE_0__.sendOTP)(event, webChatInstance, userProfile, tenant);
    }

    // To verify OTP code
    if (event.data.context.skills['actions skill'].skill_variables.Email_Address_Change_Verify_OTP === true) {
      await (0,_modules_otp_js__WEBPACK_IMPORTED_MODULE_0__.verifyOTP)(event, webChatInstance, userProfile, tenant);
    }

    // To search digital credential by name
    if (event.data.context.skills['actions skill'].skill_variables.Digital_Credential_Search_By_Name_Confirm === true) {
      await (0,_modules_digital_credential_js__WEBPACK_IMPORTED_MODULE_2__.searchDigitalCredential)(event, webChatInstance, tenant, 'ByName', TOKEN);
    }

    // To search digital credential by id
    if (event.data.context.skills['actions skill'].skill_variables.Digital_Credential_Search_By_Id_Confirm === true) {
      await (0,_modules_digital_credential_js__WEBPACK_IMPORTED_MODULE_2__.searchDigitalCredential)(event, webChatInstance, tenant, 'ById', TOKEN);
    }

    // To submit CSP ticket
    if (event.data.context.skills['actions skill'].skill_variables.Support_Ticket_Submit === true) {
      await (0,_modules_csp_ticket_js__WEBPACK_IMPORTED_MODULE_1__.createCspTicket)(event, webChatInstance, userProfile, 'Adult');
    }

    // To load all digital credential plans of the user
    if (event.data.context.skills['actions skill'].skill_variables.Digital_Credential_Learning_Plan_Search_Confirm === true) {
      await (0,_modules_digital_credential_js__WEBPACK_IMPORTED_MODULE_2__.loadUserLearningPlans)(webChatInstance, tenant, TOKEN);
    }

    // To load user courses
    if (event.data.context.skills['actions skill'].skill_variables.Load_User_Courses === true) {
      await (0,_modules_transcript_js__WEBPACK_IMPORTED_MODULE_9__.loadUserTranscripts)(webChatInstance, tenant, TOKEN);
    }

    // To load user digital credentials
    if (event.data.context.skills['actions skill'].skill_variables.Load_User_Badges === true) {
      await (0,_modules_digital_credential_js__WEBPACK_IMPORTED_MODULE_2__.getUserDigitalCredentials)(webChatInstance, tenant, TOKEN);
    }

    // To close chat window
    if (event.data.context.skills['actions skill'].skill_variables.Close_Chat_Window === true) {
      await (0,_modules_close_chat_window_js__WEBPACK_IMPORTED_MODULE_10__.closeChatWindow)(webChatInstance);
    }
  }
  async function preReceiveHandler(event) {
    //console.log(event);
  }
  async function sendHandler(event) {
    //console.log(event);
  }
  async function preSendHandler(event) {
    // Show the indicator.
    webChatInstance.updateIsTypingCounter('increase');
    //console.log(event);
    event.data.context.skills['actions skill'] =
      event.data.context.skills['actions skill'] || {};
    event.data.context.skills['actions skill'].skill_variables =
      event.data.context.skills['actions skill'].skill_variables || {};
    event.data.context.skills['actions skill'].action_variables =
      event.data.context.skills['actions skill'].action_variables || {};

    /* if (event.data.input?.text !== process.env.SPAM_TRIGGER) {
      event.data.context.skills['actions skill'].skill_variables.Input_Text_Spam_Detection =
        event.data.input?.text
    } else {
      event.data.context.skills['actions skill'].skill_variables.Input_Text_Spam_Detection =
      '';
    }*/

    event.data.context.skills['actions skill'].skill_variables.User_Name =
      userProfile.fullName;
    event.data.context.skills['actions skill'].skill_variables.User_Email =
      userProfile.Email;
    event.data.context.skills['actions skill'].skill_variables.CountryCode =
      userProfile.CountryCode;
    event.data.context.skills['actions skill'].skill_variables.User_Source =
      userProfile.source;
    event.data.context.skills['actions skill'].skill_variables.User_RegionConsent =
      userDemographics.regionConsent;  
    event.data.context.skills['actions skill'].skill_variables.User_Country =
      userDemographics.country;
    event.data.context.skills['actions skill'].skill_variables.User_Location =
      userDemographics.geography;  
    event.data.context.skills['actions skill'].skill_variables.User_Type =
      userDemographics.userType;

    let oAuthProvider = '';
    userProfile.oauthIds.forEach((currentValue, index) => {
      if (index > 0) {
        oAuthProvider = ' ,' + currentValue['oAuthProvider'];
      } else {
        oAuthProvider = currentValue['oAuthProvider'];
      }
    });
    event.data.context.skills[
      'actions skill'
    ].skill_variables.User_oAuthProvider = oAuthProvider;

    event.data.context.skills['actions skill'].skill_variables.User_Cnum =
      userProfile.Cnum;
    event.data.context.skills[
      'actions skill'
    ].skill_variables.Preferred_Language = userProfile.preferredLanguage;
    event.data.context.skills['actions skill'].skill_variables.Organization_Id =
      userProfile.organizationId;
    event.data.context.skills['actions skill'].skill_variables.Organization_Name =
      userProfile.organizationName;
    let adultRegisterLink =
      'https://sb-auth.skillsbuild.org/signup?org=' +
      userProfile.organization +
      '&mgr=' +
      userProfile.Cnum +
      '&lang=' +
      userProfile.preferredLanguage;
    event.data.context.skills[
      'actions skill'
    ].skill_variables.Learner_Register_Link = adultRegisterLink;

    // Group
    event.data.context.skills['actions skill'].skill_variables.Group_Id = '';
    userGroupsWithIds.forEach((currentValue, index) => {
      if (currentValue['groupId'] == "690") {
        event.data.context.skills[
          'actions skill'
        ].skill_variables.Chronus_Access = true;
      }
      if (currentValue['groupId'] == "1546") {
        event.data.context.skills[
          'actions skill'
        ].skill_variables.Coursera_NPO = true;
      }
      if (
        currentValue['groupId'] ==
        "1208"
      ) {
        event.data.context.skills[
          'actions skill'
        ].skill_variables.GS_Open_SkillsBuild_Public_Group_Space = true;
      }
      if (currentValue['groupId'] == "1290") {
        event.data.context.skills[
          'actions skill'
        ].skill_variables.Udemy_Master_Group = true;
      }
      if (currentValue['groupId'] == "0001") {
        event.data.context.skills[
          'actions skill'
        ].skill_variables.IBM_Group = true;
      }
      if (currentValue['groupId'] == "2650") {
        event.data.context.skills[
          'actions skill'
        ].skill_variables.Partner_SS_Group = true;
        if (userDemographics.userType == 'Partner' && userProfile.Email.toLowerCase().indexOf("ibm.com") == -1) {
          event.data.context.skills[
            'actions skill'
          ].skill_variables.Open_Plus_Primary = true;
          event.data.context.skills['actions skill'].skill_variables.Group_Id = "2650";
        }
      }
      if (currentValue['groupId'] == "2660") {
        event.data.context.skills[
          'actions skill'
        ].skill_variables.Academia = true;
      }
      if (currentValue['groupId'] == "2958") {
        event.data.context.skills[
          'actions skill'
        ].skill_variables.Program_Partner = true;
        event.data.context.skills['actions skill'].skill_variables.Group_Id = "2958";
      }
      if (currentValue['groupId'] == "3065") {
        event.data.context.skills[
          'actions skill'
        ].skill_variables.Academia_HBCU = true;
      }
      if (currentValue['groupId'] == "3145") {
        event.data.context.skills[
          'actions skill'
        ].skill_variables.Cisco_LTI_Users_Group = true;
        event.data.context.skills[
          'actions skill'
        ].skill_variables.Organization_Partner = 'Cisco';
      }
    });

    // To detect spamming
    const inputText = event.data.input?.text;
    if (inputText !== "Spam detected" && typeof inputText !== 'undefined' && inputText.trim() !== '') {
      await (0,_modules_spam_js__WEBPACK_IMPORTED_MODULE_4__.verifySpamConversation)(webChatInstance, userProfile, inputText, 'ptech').then((status) => {
        if (status === true) {
          event.data.input.text = "Spam detected";
        }
        event.data.context.skills['actions skill'].skill_variables.Spam_Detected = status;
      });
    }
    
    // Course category and course list
    if (event.data.context.skills[
      'actions skill'
    ].skill_variables.Academia = true) {
      courseInfo = await (0,_modules_course_category_list_js__WEBPACK_IMPORTED_MODULE_5__.generateCourseCategoryList)(event, courseInfo, 'Academia');
    } else {
      courseInfo = await (0,_modules_course_category_list_js__WEBPACK_IMPORTED_MODULE_5__.generateCourseCategoryList)(event, courseInfo, 'Adult');
    }
    if (Object.keys(courseCategory).length === 0) {
      // To stop the api call more than once
      event.data.context.skills['actions skill'].skill_variables.Course_Category_Generate = false;
      event.data.context.skills['actions skill'].skill_variables.Course_Category = courseInfo.courseCategory;
    }
    event.data.context.skills['actions skill'].skill_variables.Course_List = courseInfo.courseList;
    for (const [key, value] of Object.entries(courseInfo.courseCatalogSelected)) {
      event.data.context.skills['actions skill'].skill_variables[key] = value;
    }
    // Course category and course list
  }

  async function customResponseHandler(event) {
    if (
      event.data.message.user_defined &&
      event.data.message.user_defined.user_defined_type ===
        'user-file-upload'
    ) {
      (0,_modules_file_upload_download_js__WEBPACK_IMPORTED_MODULE_6__.fileUploadCustomResponseHandler)(event, webChatInstance, ++fileUploadInstanceNo);
    }

    if (
      event.data.message.user_defined &&
      event.data.message.user_defined.user_defined_type ===
        'digital-creadential-learning-plan-list'
    ) {
      await (0,_modules_digital_creadential_learning_plan_list_js__WEBPACK_IMPORTED_MODULE_7__.digitalCreadentialLearningPlanListCustomResponseHandler)(event, webChatInstance, 'skills', TOKEN);
    }
  }

  /**
  * This is the function that is called when a new identity token is needed.
  */
  async function getIdentityToken(event) {
    // In a real environment, this will make a call to your server to request a new JWT. In our example, this JWT
    // has an expiration time of 10 seconds to demonstrate that this function will be called when the token expires.
    event.identityToken = await (0,_modules_identity_token_js__WEBPACK_IMPORTED_MODULE_3__.getJWT)(userProfile, 'adult', "production");
  }

  /**
   * Update chat width on start and on resize
   * @param {*} instance 
   */
  function updateChatbotSize(instance) {
    if (window.innerWidth > 560) {
      instance.updateCSSVariables({ 'BASE-width': '500px' });
    } else {
      instance.updateCSSVariables({ 'BASE-width': '92%' });
    }
    /* instance.updateCSSVariables({
      'BASE-max-height': chatWindowHeight() + 'px',
      'BASE-height': chatWindowHeight() + 'px',
    });*/
  }

  function handleResize(instance) {
    updateChatbotSize(instance);
  }

  async function onLoad(instance) {
    // Save this instance so we can use it in our handlers.
    // webChatInstance = instance;
    window.webChatInstance = instance;
    const userProfileJson = YL.YL_USER_PROFILE;
    userProfile = userProfileJson.userProfile;
    userDemographics = userProfileJson.demographics;
    userGroupsWithIds = userProfileJson.groupsWithIds;
    const greetingMessage =
      'Hi ' +
      userProfile.FirstName +
      "! I'm a virtual assistant. How can I help you today?";
    instance.updateHomeScreenConfig({
      is_on: true,
      greeting: greetingMessage,
    });

    const homeScreenNotification = JSON.parse(HOMESCREEN_NOTIFICATION_ADULT)
    if (homeScreenNotification.show) {
      instance.writeableElements.homeScreenHeaderBottomElement.innerHTML = '<div class="HSNContainer">' + homeScreenNotification.message + '</div>';
    }

    /*instance.on({ type: 'tour:step', handler: tourStepHandler });*/
    instance.on({ type: 'pre:send', handler: preSendHandler });
    instance.on({ type: 'send', handler: sendHandler });
    instance.on({ type: 'pre:receive', handler: preReceiveHandler });
    instance.on({ type: 'receive', handler: receiveHandler });
    instance.on({ type: 'customResponse', handler: customResponseHandler });
    instance.on({ type: 'identityTokenExpired', handler: getIdentityToken });
    await instance.render();
    //call on render
    updateChatbotSize(instance);
    // call on resize
    window.addEventListener('resize', () => handleResize(instance));
    // home screen quick links
    // createHomeScreenQuickLinks(instance);
  }

  const page = new URLSearchParams(window.location.search).get('page');
  let openChatByDefault = false;
  if (page === 'chat') {
    openChatByDefault = true;
  }

  window.watsonAssistantChatOptions = {
    integrationID: "d17ef658-1d80-4b3b-ab24-7453864b4bc4", // The ID of this integration.
    region: 'us-south', // The region your integration is hosted in.
    serviceInstanceID: '403d6b33-afd8-47d7-93be-fb693dd7ec87', // The ID of your service instance.
    direction: 'ltr',
    /* clientVersion: "7.10.0",*/
    showRestartButton: true, // Add restart button
    openChatByDefault: openChatByDefault,
    pageLinkConfig: {
      linkIDs: {
        'change-email': {
          text: 'Change Email'
        },
        'get-support': {
          text: 'Get Support'
        },
      }
    },
    onLoad: onLoad,
  };
  setTimeout(function() {
    const t = document.createElement('script');
    t.src =
      'https://web-chat.global.assistant.watson.appdomain.cloud/versions/' +
      (window.watsonAssistantChatOptions.clientVersion || 'latest') +
      '/WatsonAssistantChatEntry.js';
    document.head.appendChild(t);
  });
})();

})();

/******/ })()
;